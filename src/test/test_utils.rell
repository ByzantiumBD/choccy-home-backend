@test module;
import ops: ^.test_operations;
import ^^.main;
import lib.ft4.accounts;
import ft_utils: lib.ft4.utils;
import lib.ft4.assets;
import test: lib.ft4.test.utils;

function get_account(pubkey: byte_array) {
    val acc = accounts.account @? { pubkey.hash() };
    return if (acc??) acc else create_account(pubkey);
}

function create_account(pubkey: byte_array) {
    val ad = accounts.auth_descriptor(
        accounts.auth_type.S,
        [
            set(["A", "T"]).to_gtv(),
            pubkey.to_hex().to_gtv()
        ],
        null.to_gtv()
    );
    ops.create_acc_test(ad).run();
    return accounts.account @ { pubkey.hash() };
}

function get_asset(name, decimals: integer = 18) {
    rell.test.tx().op(
        ops.register_asset_test(name, decimals)
    ).run();
    return assets.asset @ { name };
}

// 100, 18 decimals
function give_balance(accounts.account, assets.asset, big_integer = 100000000000000000000L) {
    rell.test.tx().op(
        ops.mint_test(
            account.id,
            asset.id,
            big_integer
        )
    ).nop().run();
}

function run(rell.test.op, signer: rell.test.keypair) {
    rell.test.tx().op(
        test.ft_auth_operation_for(signer.pub),
        op
    ).nop().sign(signer.priv).run();
}

function expect_failure(rell.test.op, signer: rell.test.keypair, text) {
    rell.test.tx().op(
        test.ft_auth_operation_for(signer.pub),
        op
    ).nop().sign(signer.priv).run_must_fail(text);
}

function setup_alice_with_balance() {
    val alice = create_account(rell.test.keypairs.alice.pub);
    give_balance(alice, main.cusd.asset, 1000L);
    give_balance(alice, main.cusd.wrappable, 1000L);
    give_balance(main.cusd.vault, main.cusd.wrappable, 1000L);

    return alice;
}
